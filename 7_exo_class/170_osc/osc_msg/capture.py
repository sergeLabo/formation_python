js = [[[1, -678, 1720, -29, -528, 1824, -191, -533, 1842, -301, -302, 2032, -300, -64, 1904, 133, -541, 1866, 187, -297, 1898, 242, -98, 1938, -127, -26, 1824, -132, 338, 1893, -119, 687, 1989, 67, -26, 1809, 52, 340, 1901, 35, 679, 1965, -28, -697, 1727, 18, -716, 1734, -95, -718, 1821, 66, -726, 1799, 1], 1619353644.5985243], [[-11, -681, 1727, -29, -531, 1834, -189, -527, 1821, -295, -295, 1989, -326, -65, 1947, 134, -558, 1877, 187, -283, 1907, 187, -63, 1896, -126, -43, 1804, -132, 323, 1893, -121, 697, 2016, 67, -26, 1804, 52, 323, 1890, 54, 680, 1968, -44, -716, 1736, 17, -714, 1731, -94, -712, 1806, 49, -716, 1776, 1], 1619353644.679108], [[-11, -681, 1727, -2877, -426, 3263, -2899, -387, 3191, -295, -295, 1989, -326, -65, 1947, 134, -558, 1877, 187, -283, 1907, 187, -63, 1896, -126, -43, 1804, -132, 323, 1893, -121, 697, 2016, 67, -26, 1804, 52, 323, 1890, 54, 680, 1968, -44, -716, 1736, 17, -714, 1731, -94, -712, 1806, 49, -716, 1776, 2], 1619353644.679657], [[1, -683, 1734, -29, -528, 1824, -178, -536, 1850, -303, -303, 2045, -329, -66, 1965, 130, -528, 1821, 186, -296, 1896, 191, -65, 1938, -126, -43, 1809, -132, 324, 1896, -118, 684, 1980, 66, -26, 1794, 70, 324, 1896, 71, 684, 1927, -28, -702, 1741, 31, -718, 1741, -96, -726, 1842, 66, -726, 1801, 1], 1619353644.7534719], [[18, -683, 1734, -12, -531, 1832, -159, -531, 1834, -293, -309, 1976, -327, -81, 1956, 151, -556, 1868, 186, -296, 1890, 205, -64, 1901, -126, -43, 1809, -132, 323, 1890, -118, 682, 1973, 66, -26, 1794, 69, 322, 1885, 53, 691, 1947, -11, -716, 1734, 48, -726, 1760, -77, -730, 1809, 80, -726, 1801, 1], 1619353644.8274107], [[17, -666, 1725, 1, -528, 1821, -163, -544, 1879, -1000000, -1000000, -1000000, -318, -79, 1904, 158, -517, 1784, 203, -295, 1887, 185, -27, 1882, -123, -42, 1767, -132, 339, 1896, -119, 686, 1986, 66, -26, 1776, 70, 337, 1887, 70, 679, 1912, 1, -697, 1727, 47, -698, 1731, -60, -714, 1811, 80, -708, 1796, 1], 1619353644.9007664], [[-2824, -503, 3238, -2878, -391, 3230, -2889, -389, 3214, -2870, -216, 3160, -318, -79, 1904, 158, -517, 1784, 203, -295, 1887, 185, -27, 1882, -123, -42, 1767, -132, 339, 1896, -119, 686, 1986, -2880, -112, 3304, 70, 337, 1887, 70, 679, 1912, -2824, -533, 3238, -2824, -533, 3238, -2848, -532, 3230, 80, -708, 1796, 2], 1619353644.9019332], [[31, -679, 1722, 18, -524, 1809, -143, -536, 1852, -223, -325, 1959, -292, -118, 1965, 167, -559, 1879, 218, -313, 1890, 215, -77, 1858, -127, -43, 1816, -142, 329, 1839, -137, 684, 1980, 66, -26, 1779, 70, 338, 1890, 52, 677, 1907, 1, -713, 1727, 63, -697, 1729, -60, -710, 1801, 97, -708, 1796, 1], 1619353644.9748533], [[31, -675, 1713, 1, -523, 1804, -143, -536, 1852, -219, -302, 1930, -291, -100, 1962, 160, -536, 1801, 235, -311, 1879, 230, -76, 1842, -126, -43, 1806, -160, 314, 1839, -189, 667, 1976, 66, -43, 1799, 70, 338, 1893, 54, 695, 1959, 1, -693, 1718, 64, -698, 1731, -59, -706, 1791, 97, -709, 1799, 1], 1619353645.0478828], [[31, -679, 1722, 1, -523, 1804, -162, -541, 1868, -243, -308, 1973, -300, -97, 1904, 145, -535, 1799, 238, -333, 1901, 233, -95, 1866, -127, -61, 1826, -196, 321, 1879, -221, 661, 1959, 67, -43, 1809, 70, 323, 1887, 53, 692, 1950, -11, -697, 1727, 47, -716, 1734, -76, -704, 1786, 64, -689, 1748, 1], 1619353645.1197677], [[17, -679, 1722, -29, -522, 1801, -175, -528, 1824, -257, -307, 1965, -328, -81, 1962, 129, -522, 1801, 204, -314, 1896, 230, -76, 1839, -140, -43, 1804, -199, 326, 1910, -257, 667, 1976, 49, -43, 1801, 70, 338, 1893, 53, 685, 1930, -27, -695, 1722, 31, -714, 1729, -94, -709, 1799, 65, -716, 1776, 1], 1619353645.191372]]


def get_points_blender(data):


    # RÃ©ception de 54=3*18 ou 45=3*15
    if len(data) == 54 or len(data) == 45:
        nombre = int(len(data)/3)
        points = []
        for i in range(nombre):
            # Reconstruction par 3
            val = [ data[(3*i)],
                    data[(3*i)+1],
                    data[(3*i)+2]]
            if val == [-1000000, -1000000, -1000000]:
                points.append(None)
            else:
                # Conversion cubemos vers blender
                points.append([val[0]/1000, val[2]/1000, -val[1]/1000])
    else:
        points = None

    return points

pts = []
for data in js:
    p = data[0][:-1]
    # #print(p)
    pt = get_points_blender(p)
    # #print(pt)
    pts.append(pt)

print(pts)
